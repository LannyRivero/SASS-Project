/* crear un sistema de clases utilitarias reutilizables, y hace uso de varias características avanzadas de Sass, 
como maps, loops, y la extensión del uso de variables. */


@use 'sass:math'; //Importa el módulo math de Sass, lo que permite utilizar funciones matemáticas avanzadas (por ejemplo, divisiones, multiplicaciones)
@use 'variables' as v;

/*El código define un mapa de utilidades ($utilities) que contiene una serie de configuraciones relacionadas con espaciado,
 márgenes, opacidad, bordes, tipografía y disposición. Cada propiedad de utilidad está organizada con un prefijo y un conjunto de valores.*/

 /*Este patrón se repite para otras propiedades de utilidad, como márgenes, opacidad, bordes y tamaños de fuente. Es importante destacar que este
enfoque centraliza el diseño y permite crear clases reutilizables para espaciados y otros estilos a través de un sistema consistente.*/

$utilities: (
  "padding": (
    "prefix": "p",//el prefijo que se usará para la clase generada (en este caso, todas las clases de padding tendrán el prefijo p).
    "values": ( //Un conjunto de valores asociados con diferentes niveles de espaciado. En este caso, el padding varía entre 0, 1, 2, 3, 4 y 5
      "0": 0,
      "1": v.$base-padding,
      "2": v.$base-padding * 2,
      "3": v.$base-padding * 4,
      "4": v.$base-padding * 6,
      "5": v.$base-padding * 8
    ),
  ),
  "padding-left": (
    "prefix": "pl",
    "values": (
      "0": 0,
      "1": v.$base-padding,
      "2": v.$base-padding * 2,
      "3": v.$base-padding * 4,
      "4": v.$base-padding * 6,
      "5": v.$base-padding * 8
    ),
  ),
  "padding-right": (
    "prefix": "pr",
    "values": (
      "0": 0,
      "1": v.$base-padding,
      "2": v.$base-padding * 2,
      "3": v.$base-padding * 4,
      "4": v.$base-padding * 6,
      "5": v.$base-padding * 8
    ),
  ),
  "padding-top": (
    "prefix": "pt",
    "values": (
      "0": 0,
      "1": v.$base-padding,
      "2": v.$base-padding * 2,
      "3": v.$base-padding * 4,
      "4": v.$base-padding * 6,
      "5": v.$base-padding * 8
    ),
  ),
  "padding-bottom": (
    "prefix": "pb",
    "values": (
      "0": 0,
      "1": v.$base-padding,
      "2": v.$base-padding * 2,
      "3": v.$base-padding * 4,
      "4": v.$base-padding * 6,
      "5": v.$base-padding * 8
    ),
  ),
  "margin": (
    "prefix": "m",
    "values": (
      "0": 0,
      "1": v.$base-margin,
      "2": v.$base-margin * 2,
      "3": v.$base-margin * 4,
      "4": v.$base-margin * 6,
      "5": v.$base-margin * 8
    ),
  ),
  "margin-left": (
    "prefix": "ml",
    "values": (
      "0": 0,
      "1": v.$base-margin,
      "2": v.$base-margin * 2,
      "3": v.$base-margin * 4,
      "4": v.$base-margin * 6,
      "5": v.$base-margin * 8
    ),
  ),
  "margin-right": (
    "prefix": "mr",
    "values": (
      "0": 0,
      "1": v.$base-margin,
      "2": v.$base-margin * 2,
      "3": v.$base-margin * 4,
      "4": v.$base-margin * 6,
      "5": v.$base-margin * 8
    ),
  ),
  "margin-top": (
    "prefix": "mt",
    "values": (
      "0": 0,
      "1": v.$base-margin,
      "2": v.$base-margin * 2,
      "3": v.$base-margin * 4,
      "4": v.$base-margin * 6,
      "5": v.$base-margin * 8
    ),
  ),
  "margin-bottom": (
    "prefix": "mb",
    "values": (
      "0": 0,
      "1": v.$base-margin,
      "2": v.$base-margin * 2,
      "3": v.$base-margin * 4,
      "4": v.$base-margin * 6,
      "5": v.$base-margin * 8
    ),
  ),
  "opacity": (
    "prefix": "o",
    "values": (
      "10": 0.1,
      "20": 0.2,
      "30": 0.3,
      "40": 0.4,
      "50": 0.5,
      "60": 0.6,
      "70": 0.7,
      "80": 0.8,
      "90": 0.9,
      "100": 1,
    ),
  ),
  "border-radius": (
    "prefix": "br",
    "values": (
      "default": v.$base-border-radius,
      "none": 0,
      "xs": math.div(v.$base-border-radius, 4),
      "sm": math.div(v.$base-border-radius, 2),
      "lg": v.$base-border-radius * 2,
      "full": 50%,
    )
  ),
  "display": (
    "prefix": "display",
    "values": (
      "n": none,
      "b": block,
      "f": flex,
      "i": inline,
      "i-b": inline-block
    )
  ),
  "font-size": (
    "prefix": "font",
    "values": (
      "sm": v.$font-size-sm,
      "md": v.$base-font-size,
      "lg": v.$font-size-lg,
      "xl": v.$font-size-xl,
      "xxl": v.$font-size-xxl
    )
  )
);
/*crea dinámicamente las clases CSS utilizando las configuraciones definidas en el mapa de utilidades ($utilities).*/
// Generación de clases utilitarias
@each $property, $map in $utilities {//recorre cada propiedad del mapa de utilidades, como padding, margin, font-size, etc.
  $prefix: map-get($map, "prefix");//Extrae el prefijo de la propiedad de utilidad (por ejemplo, p, m, font, etc.).
  $values: map-get($map, "values");//Extrae los valores asociados con la propiedad de utilidad (por ejemplo, el conjunto de valores de padding).

  //Luego, en el siguiente bucle anidado:
  
  /*Si el valor de la clave es default, la clase generada será simplemente .prefix (por ejemplo, .p para padding).

  Si la clave es diferente a default, se añade un sufijo a la clase, como .p-1, .p-2, etc., generando clases como .p-1, .p-2, etc., que aplican diferentes niveles de padding.
  Por ejemplo:
  
  Para el caso de padding, si $values tiene una clave 1, se generará la clase .p-1 con el valor de padding correspondiente.*/
  @each $k, $v in $values {
    @if ($k == "default") {
      .#{$prefix} {
        #{$property}: $v;
      }
    } @else {
      .#{$prefix}-#{$k} {
        #{$property}: $v;
      }
    }
  }
}


/*El resultado final de este código es la creación de clases utilitarias dinámicas y reutilizables que pueden ser utilizadas directamente en el HTML 
para aplicar estilos, sin tener que escribir CSS adicional. Por ejemplo, para el padding, las clases generadas serían:
Este enfoque modular y dinámico en Sass proporciona una manera muy flexible y escalable de crear un sistema de utilidades para tus estilos. Al definir todo en un solo archivo, 
las clases CSS se generan de manera automática y reutilizable, facilitando la gestión de los estilos y promoviendo la consistencia en el diseño del proyecto.*/
