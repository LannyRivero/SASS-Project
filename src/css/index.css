@charset "UTF-8";
@import url("https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap");
/*Aquí estamos creando una variable y asignándole  valor. Las variables en Sass comienzan con el símbolo $, y son útiles para almacenar valores que usaremos en 
varias partes del código, lo que facilita la modificación posterior.
En Sass, las variables te permiten almacenar valores reutilizables, como colores, tamaños, etc.*/
/*Este código en Sass está definiendo una serie de variables que permiten gestionar de manera fácil y centralizada los colores, el espaciado, los bordes, las sombras y 
los tamaños de fuente en un proyecto. Esto hace que el diseño sea más mantenible, ya que si se desea cambiar algún valor (por ejemplo, el color primario o el tamaño base de la fuente),

basta con modificarlo en un solo lugar en lugar de hacerlo manualmente en todo el código CSS.*/
/* inicia un mapa de colores llamado $colors. Un mapa es una estructura de datos que asocia claves con valores.
En este caso, cada clave (como "primary", "secondary", etc.) está asociada con un color específico.*/
/* reset styles */
* {
  color: inherit;
  margin: 0;
}

body {
  font-family: Poppins;
}

ul {
  padding: 0;
  list-style-type: none;
}

a {
  text-decoration: none;
}

hr {
  border: 0;
  border-top: 1px dotted #efefef;
}

img {
  max-width: 100%;
}

.test {
  color: #326dee;
}

/*Este archivo utiliza una estructura modular y dinámica para crear un sistema de cuadrícula (grid) flexible y clases de 
diseño relacionadas. 
En este caso, se aprovechan las variables, los mixins, y el sistema de puntos de interrupción (breakpoints) 
para adaptarse a diferentes tamaños de pantalla. Vamos a desglosar y explicar cada parte del código.*/
/* Es una clase base que define el contenedor principal de tu diseño. Se asegura de que el contenedor ocupe el 100% del ancho de la pantalla (hasta un máximo de 1200px), 
con márgenes automáticos para centrarlo. También se le
 aplica un padding de 20px en los lados y se establece el modelo de caja (box-sizing: border-box) para incluir el padding dentro de las dimensiones totales del contenedor.*/
.container {
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 20px;
  box-sizing: border-box;
}

/*Se utiliza para crear un contenedor de tipo flexbox, con dirección de fila y 
envoltura de los elementos (lo que permite que las columnas se acomoden automáticamente si el espacio es insuficiente).*/
.row {
  display: flex;
  flex-flow: row wrap;
}

/*Este bloque de código genera clases para los distintos tamaños de gap entre las columnas. Por ejemplo, para un gap de 10px, se genera:

.gap-0 > *: Establece un padding de 0px para todos los hijos directos de este contenedor.
.gap-1 > *: Establece un padding de 10px para todos los hijos directos.
.gap-0: Establece márgenes negativos a los lados para compensar el padding y garantizar que las columnas se alineen correctamente.
Este patrón se repite para todos los valores del mapa $grid-gaps.*/
.gap-0 > * {
  padding: 0;
}

.gap-0 {
  margin-left: 0;
  margin-right: 0;
}

.gap-1 > * {
  padding: 10px;
}

.gap-1 {
  margin-left: -10px;
  margin-right: -10px;
}

.gap-2 > * {
  padding: 20px;
}

.gap-2 {
  margin-left: -20px;
  margin-right: -20px;
}

.gap-3 > * {
  padding: 30px;
}

.gap-3 {
  margin-left: -30px;
  margin-right: -30px;
}

/*Aquí se generan clases para aplicar las diferentes opciones de justify-content en los contenedores flex. Las clases generadas serán:

.justify-flex-start
.justify-flex-end
.justify-center
.justify-space-between
.justify-space-around
Estas clases permiten alinear los elementos de un contenedor flex de acuerdo a uno de los valores predefinidos en $layout-values.*/
.justify-flex-start {
  justify-content: flex-start;
}

.justify-flex-end {
  justify-content: flex-end;
}

.justify-center {
  justify-content: center;
}

.justify-space-between {
  justify-content: space-between;
}

.justify-space-around {
  justify-content: space-around;
}

/*@include bp.xs { ... }: Este bloque de código utiliza el mixin bp.xs, que probablemente aplica las reglas dentro de los puntos de 
interrupción definidos para pantallas de tamaño "xs" (extra pequeñas).
Dentro de cada uno de estos bloques, se utiliza un bucle @for para generar clases de columnas con anchos variables, desde .col-1-xs hasta .col-12-xs.
El ancho de cada columna se calcula como una fracción del total de columnas (12 en este caso).

El proceso se repite para cada uno de los puntos de interrupción (xs, sm, md, lg, xl), lo que permite crear un sistema de grid responsivo. Cada tamaño de columna 
se adapta al tamaño de pantalla.

Por ejemplo, para el tamaño xs, .col-1-xs tendrá un ancho de math.div(1 * 100%, 12), lo que da como resultado un 8.33% del ancho total, y así sucesivamente hasta .col-12-xs, 
que ocupará el 100%.**/
@media (min-width: 0) {
  .col-1-xs {
    box-sizing: border-box;
    flex-grow: 0;
    width: 8.3333333333%;
  }
  .col-2-xs {
    box-sizing: border-box;
    flex-grow: 0;
    width: 16.6666666667%;
  }
  .col-3-xs {
    box-sizing: border-box;
    flex-grow: 0;
    width: 25%;
  }
  .col-4-xs {
    box-sizing: border-box;
    flex-grow: 0;
    width: 33.3333333333%;
  }
  .col-5-xs {
    box-sizing: border-box;
    flex-grow: 0;
    width: 41.6666666667%;
  }
  .col-6-xs {
    box-sizing: border-box;
    flex-grow: 0;
    width: 50%;
  }
  .col-7-xs {
    box-sizing: border-box;
    flex-grow: 0;
    width: 58.3333333333%;
  }
  .col-8-xs {
    box-sizing: border-box;
    flex-grow: 0;
    width: 66.6666666667%;
  }
  .col-9-xs {
    box-sizing: border-box;
    flex-grow: 0;
    width: 75%;
  }
  .col-10-xs {
    box-sizing: border-box;
    flex-grow: 0;
    width: 83.3333333333%;
  }
  .col-11-xs {
    box-sizing: border-box;
    flex-grow: 0;
    width: 91.6666666667%;
  }
  .col-12-xs {
    box-sizing: border-box;
    flex-grow: 0;
    width: 100%;
  }
}
@media (min-width: 480px) {
  .col-1-sm {
    box-sizing: border-box;
    flex-grow: 0;
    width: 8.3333333333%;
  }
  .col-2-sm {
    box-sizing: border-box;
    flex-grow: 0;
    width: 16.6666666667%;
  }
  .col-3-sm {
    box-sizing: border-box;
    flex-grow: 0;
    width: 25%;
  }
  .col-4-sm {
    box-sizing: border-box;
    flex-grow: 0;
    width: 33.3333333333%;
  }
  .col-5-sm {
    box-sizing: border-box;
    flex-grow: 0;
    width: 41.6666666667%;
  }
  .col-6-sm {
    box-sizing: border-box;
    flex-grow: 0;
    width: 50%;
  }
  .col-7-sm {
    box-sizing: border-box;
    flex-grow: 0;
    width: 58.3333333333%;
  }
  .col-8-sm {
    box-sizing: border-box;
    flex-grow: 0;
    width: 66.6666666667%;
  }
  .col-9-sm {
    box-sizing: border-box;
    flex-grow: 0;
    width: 75%;
  }
  .col-10-sm {
    box-sizing: border-box;
    flex-grow: 0;
    width: 83.3333333333%;
  }
  .col-11-sm {
    box-sizing: border-box;
    flex-grow: 0;
    width: 91.6666666667%;
  }
  .col-12-sm {
    box-sizing: border-box;
    flex-grow: 0;
    width: 100%;
  }
}
@media (min-width: 720px) {
  .col-1-md {
    box-sizing: border-box;
    flex-grow: 0;
    width: 8.3333333333%;
  }
  .col-2-md {
    box-sizing: border-box;
    flex-grow: 0;
    width: 16.6666666667%;
  }
  .col-3-md {
    box-sizing: border-box;
    flex-grow: 0;
    width: 25%;
  }
  .col-4-md {
    box-sizing: border-box;
    flex-grow: 0;
    width: 33.3333333333%;
  }
  .col-5-md {
    box-sizing: border-box;
    flex-grow: 0;
    width: 41.6666666667%;
  }
  .col-6-md {
    box-sizing: border-box;
    flex-grow: 0;
    width: 50%;
  }
  .col-7-md {
    box-sizing: border-box;
    flex-grow: 0;
    width: 58.3333333333%;
  }
  .col-8-md {
    box-sizing: border-box;
    flex-grow: 0;
    width: 66.6666666667%;
  }
  .col-9-md {
    box-sizing: border-box;
    flex-grow: 0;
    width: 75%;
  }
  .col-10-md {
    box-sizing: border-box;
    flex-grow: 0;
    width: 83.3333333333%;
  }
  .col-11-md {
    box-sizing: border-box;
    flex-grow: 0;
    width: 91.6666666667%;
  }
  .col-12-md {
    box-sizing: border-box;
    flex-grow: 0;
    width: 100%;
  }
}
@media (min-width: 960px) {
  .col-1-lg {
    box-sizing: border-box;
    flex-grow: 0;
    width: 8.3333333333%;
  }
  .col-2-lg {
    box-sizing: border-box;
    flex-grow: 0;
    width: 16.6666666667%;
  }
  .col-3-lg {
    box-sizing: border-box;
    flex-grow: 0;
    width: 25%;
  }
  .col-4-lg {
    box-sizing: border-box;
    flex-grow: 0;
    width: 33.3333333333%;
  }
  .col-5-lg {
    box-sizing: border-box;
    flex-grow: 0;
    width: 41.6666666667%;
  }
  .col-6-lg {
    box-sizing: border-box;
    flex-grow: 0;
    width: 50%;
  }
  .col-7-lg {
    box-sizing: border-box;
    flex-grow: 0;
    width: 58.3333333333%;
  }
  .col-8-lg {
    box-sizing: border-box;
    flex-grow: 0;
    width: 66.6666666667%;
  }
  .col-9-lg {
    box-sizing: border-box;
    flex-grow: 0;
    width: 75%;
  }
  .col-10-lg {
    box-sizing: border-box;
    flex-grow: 0;
    width: 83.3333333333%;
  }
  .col-11-lg {
    box-sizing: border-box;
    flex-grow: 0;
    width: 91.6666666667%;
  }
  .col-12-lg {
    box-sizing: border-box;
    flex-grow: 0;
    width: 100%;
  }
}
@media (min-width: 1200px) {
  .col-1-xl {
    box-sizing: border-box;
    flex-grow: 0;
    width: 8.3333333333%;
  }
  .col-2-xl {
    box-sizing: border-box;
    flex-grow: 0;
    width: 16.6666666667%;
  }
  .col-3-xl {
    box-sizing: border-box;
    flex-grow: 0;
    width: 25%;
  }
  .col-4-xl {
    box-sizing: border-box;
    flex-grow: 0;
    width: 33.3333333333%;
  }
  .col-5-xl {
    box-sizing: border-box;
    flex-grow: 0;
    width: 41.6666666667%;
  }
  .col-6-xl {
    box-sizing: border-box;
    flex-grow: 0;
    width: 50%;
  }
  .col-7-xl {
    box-sizing: border-box;
    flex-grow: 0;
    width: 58.3333333333%;
  }
  .col-8-xl {
    box-sizing: border-box;
    flex-grow: 0;
    width: 66.6666666667%;
  }
  .col-9-xl {
    box-sizing: border-box;
    flex-grow: 0;
    width: 75%;
  }
  .col-10-xl {
    box-sizing: border-box;
    flex-grow: 0;
    width: 83.3333333333%;
  }
  .col-11-xl {
    box-sizing: border-box;
    flex-grow: 0;
    width: 91.6666666667%;
  }
  .col-12-xl {
    box-sizing: border-box;
    flex-grow: 0;
    width: 100%;
  }
}
/*Este código genera un sistema de diseño basado en un grid flexible que utiliza flexbox.
 El uso de breakpoints permite que las clases de columnas se adapten a diferentes tamaños de pantalla (responsivas), 
 mientras que las utilidades de espaciado, justificación y el contenedor .container proporcionan una estructura 
base para trabajar.*/
/*En este fichero colors vamos a estar  genrando  clases de utilidad para los colores en CSS basados en una serie de colores 
definidos en el fichero de variables. 

Se crean clases de texto (text-*), 
texto en estado hover (text-hover-*), 
y fondos (bg-*) para cada color definido. 
Además, se generan variaciones más claras y más oscuras de cada color (siempre que el color no sea negro ni blanco).*/
.text-primary {
  color: #326dee;
}

/*.text-hover-primary { //Crea una clase .text-hover-{key} para cambiar el color del texto al pasar el mouse sobre el elemento.
  &:hover {
    color: $val;
  }

}*/
.bg-primary {
  background-color: #326dee;
}

/*Comprueba si el color actual no es negro ni blanco. Esto asegura que solo se generen variaciones de colores para tonos 
que no sean estos */
/*Crea un bucle que genera  variaciones más claras (light) y  más oscuras (dark) para el color actual. El rango va de 10% a 50%.*/
.text-primary-light-1 {
  color: rgb(70.5, 123.6, 239.7);
}

.bg-primary-light-1 {
  background-color: rgb(70.5, 123.6, 239.7);
}

.text-primary-light-2 {
  color: rgb(91, 138.2, 241.4);
}

.bg-primary-light-2 {
  background-color: rgb(91, 138.2, 241.4);
}

.text-primary-light-3 {
  color: rgb(111.5, 152.8, 243.1);
}

.bg-primary-light-3 {
  background-color: rgb(111.5, 152.8, 243.1);
}

.text-primary-light-4 {
  color: rgb(132, 167.4, 244.8);
}

.bg-primary-light-4 {
  background-color: rgb(132, 167.4, 244.8);
}

.text-primary-light-5 {
  color: rgb(152.5, 182, 246.5);
}

.bg-primary-light-5 {
  background-color: rgb(152.5, 182, 246.5);
}

.text-primary-dark-1 {
  color: rgb(45, 98.1, 214.2);
}

.text-hover-primary-dark-1:hover {
  color: rgb(45, 98.1, 214.2);
}

.bg-primary-dark-1 {
  background-color: rgb(45, 98.1, 214.2);
}

.text-primary-dark-2 {
  color: rgb(40, 87.2, 190.4);
}

.text-hover-primary-dark-2:hover {
  color: rgb(40, 87.2, 190.4);
}

.bg-primary-dark-2 {
  background-color: rgb(40, 87.2, 190.4);
}

.text-primary-dark-3 {
  color: rgb(35, 76.3, 166.6);
}

.text-hover-primary-dark-3:hover {
  color: rgb(35, 76.3, 166.6);
}

.bg-primary-dark-3 {
  background-color: rgb(35, 76.3, 166.6);
}

.text-primary-dark-4 {
  color: rgb(30, 65.4, 142.8);
}

.text-hover-primary-dark-4:hover {
  color: rgb(30, 65.4, 142.8);
}

.bg-primary-dark-4 {
  background-color: rgb(30, 65.4, 142.8);
}

.text-primary-dark-5 {
  color: rgb(25, 54.5, 119);
}

.text-hover-primary-dark-5:hover {
  color: rgb(25, 54.5, 119);
}

.bg-primary-dark-5 {
  background-color: rgb(25, 54.5, 119);
}

.text-secondary {
  color: #1ac886;
}

/*.text-hover-secondary { //Crea una clase .text-hover-{key} para cambiar el color del texto al pasar el mouse sobre el elemento.
  &:hover {
    color: $val;
  }

}*/
.bg-secondary {
  background-color: #1ac886;
}

/*Comprueba si el color actual no es negro ni blanco. Esto asegura que solo se generen variaciones de colores para tonos 
que no sean estos */
/*Crea un bucle que genera  variaciones más claras (light) y  más oscuras (dark) para el color actual. El rango va de 10% a 50%.*/
.text-secondary-light-1 {
  color: rgb(48.9, 205.5, 146.1);
}

.bg-secondary-light-1 {
  background-color: rgb(48.9, 205.5, 146.1);
}

.text-secondary-light-2 {
  color: rgb(71.8, 211, 158.2);
}

.bg-secondary-light-2 {
  background-color: rgb(71.8, 211, 158.2);
}

.text-secondary-light-3 {
  color: rgb(94.7, 216.5, 170.3);
}

.bg-secondary-light-3 {
  background-color: rgb(94.7, 216.5, 170.3);
}

.text-secondary-light-4 {
  color: rgb(117.6, 222, 182.4);
}

.bg-secondary-light-4 {
  background-color: rgb(117.6, 222, 182.4);
}

.text-secondary-light-5 {
  color: rgb(140.5, 227.5, 194.5);
}

.bg-secondary-light-5 {
  background-color: rgb(140.5, 227.5, 194.5);
}

.text-secondary-dark-1 {
  color: rgb(23.4, 180, 120.6);
}

.text-hover-secondary-dark-1:hover {
  color: rgb(23.4, 180, 120.6);
}

.bg-secondary-dark-1 {
  background-color: rgb(23.4, 180, 120.6);
}

.text-secondary-dark-2 {
  color: rgb(20.8, 160, 107.2);
}

.text-hover-secondary-dark-2:hover {
  color: rgb(20.8, 160, 107.2);
}

.bg-secondary-dark-2 {
  background-color: rgb(20.8, 160, 107.2);
}

.text-secondary-dark-3 {
  color: rgb(18.2, 140, 93.8);
}

.text-hover-secondary-dark-3:hover {
  color: rgb(18.2, 140, 93.8);
}

.bg-secondary-dark-3 {
  background-color: rgb(18.2, 140, 93.8);
}

.text-secondary-dark-4 {
  color: rgb(15.6, 120, 80.4);
}

.text-hover-secondary-dark-4:hover {
  color: rgb(15.6, 120, 80.4);
}

.bg-secondary-dark-4 {
  background-color: rgb(15.6, 120, 80.4);
}

.text-secondary-dark-5 {
  color: #0d6443;
}

.text-hover-secondary-dark-5:hover {
  color: #0d6443;
}

.bg-secondary-dark-5 {
  background-color: #0d6443;
}

.text-error {
  color: #d32752;
}

/*.text-hover-error { //Crea una clase .text-hover-{key} para cambiar el color del texto al pasar el mouse sobre el elemento.
  &:hover {
    color: $val;
  }

}*/
.bg-error {
  background-color: #d32752;
}

/*Comprueba si el color actual no es negro ni blanco. Esto asegura que solo se generen variaciones de colores para tonos 
que no sean estos */
/*Crea un bucle que genera  variaciones más claras (light) y  más oscuras (dark) para el color actual. El rango va de 10% a 50%.*/
.text-error-light-1 {
  color: rgb(215.4, 60.6, 99.3);
}

.bg-error-light-1 {
  background-color: rgb(215.4, 60.6, 99.3);
}

.text-error-light-2 {
  color: rgb(219.8, 82.2, 116.6);
}

.bg-error-light-2 {
  background-color: rgb(219.8, 82.2, 116.6);
}

.text-error-light-3 {
  color: rgb(224.2, 103.8, 133.9);
}

.bg-error-light-3 {
  background-color: rgb(224.2, 103.8, 133.9);
}

.text-error-light-4 {
  color: rgb(228.6, 125.4, 151.2);
}

.bg-error-light-4 {
  background-color: rgb(228.6, 125.4, 151.2);
}

.text-error-light-5 {
  color: rgb(233, 147, 168.5);
}

.bg-error-light-5 {
  background-color: rgb(233, 147, 168.5);
}

.text-error-dark-1 {
  color: rgb(189.9, 35.1, 73.8);
}

.text-hover-error-dark-1:hover {
  color: rgb(189.9, 35.1, 73.8);
}

.bg-error-dark-1 {
  background-color: rgb(189.9, 35.1, 73.8);
}

.text-error-dark-2 {
  color: rgb(168.8, 31.2, 65.6);
}

.text-hover-error-dark-2:hover {
  color: rgb(168.8, 31.2, 65.6);
}

.bg-error-dark-2 {
  background-color: rgb(168.8, 31.2, 65.6);
}

.text-error-dark-3 {
  color: rgb(147.7, 27.3, 57.4);
}

.text-hover-error-dark-3:hover {
  color: rgb(147.7, 27.3, 57.4);
}

.bg-error-dark-3 {
  background-color: rgb(147.7, 27.3, 57.4);
}

.text-error-dark-4 {
  color: rgb(126.6, 23.4, 49.2);
}

.text-hover-error-dark-4:hover {
  color: rgb(126.6, 23.4, 49.2);
}

.bg-error-dark-4 {
  background-color: rgb(126.6, 23.4, 49.2);
}

.text-error-dark-5 {
  color: rgb(105.5, 19.5, 41);
}

.text-hover-error-dark-5:hover {
  color: rgb(105.5, 19.5, 41);
}

.bg-error-dark-5 {
  background-color: rgb(105.5, 19.5, 41);
}

.text-info {
  color: #f6c31c;
}

/*.text-hover-info { //Crea una clase .text-hover-{key} para cambiar el color del texto al pasar el mouse sobre el elemento.
  &:hover {
    color: $val;
  }

}*/
.bg-info {
  background-color: #f6c31c;
}

/*Comprueba si el color actual no es negro ni blanco. Esto asegura que solo se generen variaciones de colores para tonos 
que no sean estos */
/*Crea un bucle que genera  variaciones más claras (light) y  más oscuras (dark) para el color actual. El rango va de 10% a 50%.*/
.text-info-light-1 {
  color: rgb(246.9, 201, 50.7);
}

.bg-info-light-1 {
  background-color: rgb(246.9, 201, 50.7);
}

.text-info-light-2 {
  color: rgb(247.8, 207, 73.4);
}

.bg-info-light-2 {
  background-color: rgb(247.8, 207, 73.4);
}

.text-info-light-3 {
  color: rgb(248.7, 213, 96.1);
}

.bg-info-light-3 {
  background-color: rgb(248.7, 213, 96.1);
}

.text-info-light-4 {
  color: rgb(249.6, 219, 118.8);
}

.bg-info-light-4 {
  background-color: rgb(249.6, 219, 118.8);
}

.text-info-light-5 {
  color: rgb(250.5, 225, 141.5);
}

.bg-info-light-5 {
  background-color: rgb(250.5, 225, 141.5);
}

.text-info-dark-1 {
  color: rgb(221.4, 175.5, 25.2);
}

.text-hover-info-dark-1:hover {
  color: rgb(221.4, 175.5, 25.2);
}

.bg-info-dark-1 {
  background-color: rgb(221.4, 175.5, 25.2);
}

.text-info-dark-2 {
  color: rgb(196.8, 156, 22.4);
}

.text-hover-info-dark-2:hover {
  color: rgb(196.8, 156, 22.4);
}

.bg-info-dark-2 {
  background-color: rgb(196.8, 156, 22.4);
}

.text-info-dark-3 {
  color: rgb(172.2, 136.5, 19.6);
}

.text-hover-info-dark-3:hover {
  color: rgb(172.2, 136.5, 19.6);
}

.bg-info-dark-3 {
  background-color: rgb(172.2, 136.5, 19.6);
}

.text-info-dark-4 {
  color: rgb(147.6, 117, 16.8);
}

.text-hover-info-dark-4:hover {
  color: rgb(147.6, 117, 16.8);
}

.bg-info-dark-4 {
  background-color: rgb(147.6, 117, 16.8);
}

.text-info-dark-5 {
  color: rgb(123, 97.5, 14);
}

.text-hover-info-dark-5:hover {
  color: rgb(123, 97.5, 14);
}

.bg-info-dark-5 {
  background-color: rgb(123, 97.5, 14);
}

.text-blue {
  color: #1919e6;
}

/*.text-hover-blue { //Crea una clase .text-hover-{key} para cambiar el color del texto al pasar el mouse sobre el elemento.
  &:hover {
    color: $val;
  }

}*/
.bg-blue {
  background-color: #1919e6;
}

/*Comprueba si el color actual no es negro ni blanco. Esto asegura que solo se generen variaciones de colores para tonos 
que no sean estos */
/*Crea un bucle que genera  variaciones más claras (light) y  más oscuras (dark) para el color actual. El rango va de 10% a 50%.*/
.text-blue-light-1 {
  color: rgb(48, 48, 232.5);
}

.bg-blue-light-1 {
  background-color: rgb(48, 48, 232.5);
}

.text-blue-light-2 {
  color: #4747eb;
}

.bg-blue-light-2 {
  background-color: #4747eb;
}

.text-blue-light-3 {
  color: rgb(94, 94, 237.5);
}

.bg-blue-light-3 {
  background-color: rgb(94, 94, 237.5);
}

.text-blue-light-4 {
  color: #7575f0;
}

.bg-blue-light-4 {
  background-color: #7575f0;
}

.text-blue-light-5 {
  color: rgb(140, 140, 242.5);
}

.bg-blue-light-5 {
  background-color: rgb(140, 140, 242.5);
}

.text-blue-dark-1 {
  color: rgb(22.5, 22.5, 207);
}

.text-hover-blue-dark-1:hover {
  color: rgb(22.5, 22.5, 207);
}

.bg-blue-dark-1 {
  background-color: rgb(22.5, 22.5, 207);
}

.text-blue-dark-2 {
  color: #1414b8;
}

.text-hover-blue-dark-2:hover {
  color: #1414b8;
}

.bg-blue-dark-2 {
  background-color: #1414b8;
}

.text-blue-dark-3 {
  color: rgb(17.5, 17.5, 161);
}

.text-hover-blue-dark-3:hover {
  color: rgb(17.5, 17.5, 161);
}

.bg-blue-dark-3 {
  background-color: rgb(17.5, 17.5, 161);
}

.text-blue-dark-4 {
  color: #0f0f8a;
}

.text-hover-blue-dark-4:hover {
  color: #0f0f8a;
}

.bg-blue-dark-4 {
  background-color: #0f0f8a;
}

.text-blue-dark-5 {
  color: rgb(12.5, 12.5, 115);
}

.text-hover-blue-dark-5:hover {
  color: rgb(12.5, 12.5, 115);
}

.bg-blue-dark-5 {
  background-color: rgb(12.5, 12.5, 115);
}

.text-red {
  color: #e61919;
}

/*.text-hover-red { //Crea una clase .text-hover-{key} para cambiar el color del texto al pasar el mouse sobre el elemento.
  &:hover {
    color: $val;
  }

}*/
.bg-red {
  background-color: #e61919;
}

/*Comprueba si el color actual no es negro ni blanco. Esto asegura que solo se generen variaciones de colores para tonos 
que no sean estos */
/*Crea un bucle que genera  variaciones más claras (light) y  más oscuras (dark) para el color actual. El rango va de 10% a 50%.*/
.text-red-light-1 {
  color: rgb(232.5, 48, 48);
}

.bg-red-light-1 {
  background-color: rgb(232.5, 48, 48);
}

.text-red-light-2 {
  color: #eb4747;
}

.bg-red-light-2 {
  background-color: #eb4747;
}

.text-red-light-3 {
  color: rgb(237.5, 94, 94);
}

.bg-red-light-3 {
  background-color: rgb(237.5, 94, 94);
}

.text-red-light-4 {
  color: #f07575;
}

.bg-red-light-4 {
  background-color: #f07575;
}

.text-red-light-5 {
  color: rgb(242.5, 140, 140);
}

.bg-red-light-5 {
  background-color: rgb(242.5, 140, 140);
}

.text-red-dark-1 {
  color: rgb(207, 22.5, 22.5);
}

.text-hover-red-dark-1:hover {
  color: rgb(207, 22.5, 22.5);
}

.bg-red-dark-1 {
  background-color: rgb(207, 22.5, 22.5);
}

.text-red-dark-2 {
  color: #b81414;
}

.text-hover-red-dark-2:hover {
  color: #b81414;
}

.bg-red-dark-2 {
  background-color: #b81414;
}

.text-red-dark-3 {
  color: rgb(161, 17.5, 17.5);
}

.text-hover-red-dark-3:hover {
  color: rgb(161, 17.5, 17.5);
}

.bg-red-dark-3 {
  background-color: rgb(161, 17.5, 17.5);
}

.text-red-dark-4 {
  color: #8a0f0f;
}

.text-hover-red-dark-4:hover {
  color: #8a0f0f;
}

.bg-red-dark-4 {
  background-color: #8a0f0f;
}

.text-red-dark-5 {
  color: rgb(115, 12.5, 12.5);
}

.text-hover-red-dark-5:hover {
  color: rgb(115, 12.5, 12.5);
}

.bg-red-dark-5 {
  background-color: rgb(115, 12.5, 12.5);
}

.text-black {
  color: #000000;
}

/*.text-hover-black { //Crea una clase .text-hover-{key} para cambiar el color del texto al pasar el mouse sobre el elemento.
  &:hover {
    color: $val;
  }

}*/
.bg-black {
  background-color: #000000;
}

/*Comprueba si el color actual no es negro ni blanco. Esto asegura que solo se generen variaciones de colores para tonos 
que no sean estos */
.text-white {
  color: #ffffff;
}

/*.text-hover-white { //Crea una clase .text-hover-{key} para cambiar el color del texto al pasar el mouse sobre el elemento.
  &:hover {
    color: $val;
  }

}*/
.bg-white {
  background-color: #ffffff;
}

/*Comprueba si el color actual no es negro ni blanco. Esto asegura que solo se generen variaciones de colores para tonos 
que no sean estos */
/* Todas las reglas @use deben ir al principio */
/* Mixin para botones */
/* Clase base de botones */
.btn {
  text-decoration: none;
  cursor: pointer;
  display: inline-block;
  border: 0;
  padding: 0.75rem 0.375rem;
  border-radius: 20px;
  background-color: #e2e2e2;
}

/* Iterar sobre colores */
.btn-primary {
  text-decoration: none;
  cursor: pointer;
  display: inline-block;
  border: 0;
  padding: 0.75rem 0.375rem;
  border-radius: 20px;
  background-color: #326dee;
}
.btn-primary:hover {
  background-color: rgb(73.5472972973, 125.7702702703, 239.9527027027);
}

.btn-outlined-primary {
  text-decoration: none;
  cursor: pointer;
  display: inline-block;
  border: 0;
  padding: 0.75rem 0.375rem;
  border-radius: 20px;
  background-color: #fff;
  border: 1px solid #326dee;
}
.btn-outlined-primary:hover {
  background-color: #326dee;
}

.btn-complement-primary {
  text-decoration: none;
  cursor: pointer;
  display: inline-block;
  border: 0;
  padding: 0.75rem 0.375rem;
  border-radius: 20px;
  background-color: #326dee;
  color: light-comp(#326dee);
}
.btn-complement-primary:hover {
  color: #326dee;
  background-color: light-comp(#326dee);
}

.btn-secondary {
  text-decoration: none;
  cursor: pointer;
  display: inline-block;
  border: 0;
  padding: 0.75rem 0.375rem;
  border-radius: 20px;
  background-color: #1ac886;
}
.btn-secondary:hover {
  background-color: rgb(28.9336283186, 222.5663716814, 149.1194690265);
}

.btn-outlined-secondary {
  text-decoration: none;
  cursor: pointer;
  display: inline-block;
  border: 0;
  padding: 0.75rem 0.375rem;
  border-radius: 20px;
  background-color: #fff;
  border: 1px solid #1ac886;
}
.btn-outlined-secondary:hover {
  background-color: #1ac886;
}

.btn-complement-secondary {
  text-decoration: none;
  cursor: pointer;
  display: inline-block;
  border: 0;
  padding: 0.75rem 0.375rem;
  border-radius: 20px;
  background-color: #1ac886;
  color: light-comp(#1ac886);
}
.btn-complement-secondary:hover {
  color: #1ac886;
  background-color: light-comp(#1ac886);
}

.btn-error {
  text-decoration: none;
  cursor: pointer;
  display: inline-block;
  border: 0;
  padding: 0.75rem 0.375rem;
  border-radius: 20px;
  background-color: #d32752;
}
.btn-error:hover {
  background-color: rgb(218.418, 57.082, 97.416);
}

.btn-outlined-error {
  text-decoration: none;
  cursor: pointer;
  display: inline-block;
  border: 0;
  padding: 0.75rem 0.375rem;
  border-radius: 20px;
  background-color: #fff;
  border: 1px solid #d32752;
}
.btn-outlined-error:hover {
  background-color: #d32752;
}

.btn-complement-error {
  text-decoration: none;
  cursor: pointer;
  display: inline-block;
  border: 0;
  padding: 0.75rem 0.375rem;
  border-radius: 20px;
  background-color: #d32752;
  color: light-comp(#d32752);
}
.btn-complement-error:hover {
  color: #d32752;
  background-color: light-comp(#d32752);
}

.btn-info {
  text-decoration: none;
  cursor: pointer;
  display: inline-block;
  border: 0;
  padding: 0.75rem 0.375rem;
  border-radius: 20px;
  background-color: #f6c31c;
}
.btn-info:hover {
  background-color: rgb(246.9724576271, 201.4830508475, 52.5275423729);
}

.btn-outlined-info {
  text-decoration: none;
  cursor: pointer;
  display: inline-block;
  border: 0;
  padding: 0.75rem 0.375rem;
  border-radius: 20px;
  background-color: #fff;
  border: 1px solid #f6c31c;
}
.btn-outlined-info:hover {
  background-color: #f6c31c;
}

.btn-complement-info {
  text-decoration: none;
  cursor: pointer;
  display: inline-block;
  border: 0;
  padding: 0.75rem 0.375rem;
  border-radius: 20px;
  background-color: #f6c31c;
  color: light-comp(#f6c31c);
}
.btn-complement-info:hover {
  color: #f6c31c;
  background-color: light-comp(#f6c31c);
}

.btn-blue {
  text-decoration: none;
  cursor: pointer;
  display: inline-block;
  border: 0;
  padding: 0.75rem 0.375rem;
  border-radius: 20px;
  background-color: #1919e6;
}
.btn-blue:hover {
  background-color: rgb(48, 48, 232.5);
}

.btn-outlined-blue {
  text-decoration: none;
  cursor: pointer;
  display: inline-block;
  border: 0;
  padding: 0.75rem 0.375rem;
  border-radius: 20px;
  background-color: #fff;
  border: 1px solid #1919e6;
}
.btn-outlined-blue:hover {
  background-color: #1919e6;
}

.btn-complement-blue {
  text-decoration: none;
  cursor: pointer;
  display: inline-block;
  border: 0;
  padding: 0.75rem 0.375rem;
  border-radius: 20px;
  background-color: #1919e6;
  color: light-comp(#1919e6);
}
.btn-complement-blue:hover {
  color: #1919e6;
  background-color: light-comp(#1919e6);
}

.btn-red {
  text-decoration: none;
  cursor: pointer;
  display: inline-block;
  border: 0;
  padding: 0.75rem 0.375rem;
  border-radius: 20px;
  background-color: #e61919;
}
.btn-red:hover {
  background-color: rgb(232.5, 48, 48);
}

.btn-outlined-red {
  text-decoration: none;
  cursor: pointer;
  display: inline-block;
  border: 0;
  padding: 0.75rem 0.375rem;
  border-radius: 20px;
  background-color: #fff;
  border: 1px solid #e61919;
}
.btn-outlined-red:hover {
  background-color: #e61919;
}

.btn-complement-red {
  text-decoration: none;
  cursor: pointer;
  display: inline-block;
  border: 0;
  padding: 0.75rem 0.375rem;
  border-radius: 20px;
  background-color: #e61919;
  color: light-comp(#e61919);
}
.btn-complement-red:hover {
  color: #e61919;
  background-color: light-comp(#e61919);
}

.btn-black {
  text-decoration: none;
  cursor: pointer;
  display: inline-block;
  border: 0;
  padding: 0.75rem 0.375rem;
  border-radius: 20px;
  background-color: #000000;
}
.btn-black:hover {
  background-color: rgb(12.75, 12.75, 12.75);
}

.btn-outlined-black {
  text-decoration: none;
  cursor: pointer;
  display: inline-block;
  border: 0;
  padding: 0.75rem 0.375rem;
  border-radius: 20px;
  background-color: #fff;
  border: 1px solid #000000;
}
.btn-outlined-black:hover {
  background-color: #000000;
}

.btn-complement-black {
  text-decoration: none;
  cursor: pointer;
  display: inline-block;
  border: 0;
  padding: 0.75rem 0.375rem;
  border-radius: 20px;
  background-color: #000000;
  color: light-comp(#000000);
}
.btn-complement-black:hover {
  color: #000000;
  background-color: light-comp(#000000);
}

.btn-white {
  text-decoration: none;
  cursor: pointer;
  display: inline-block;
  border: 0;
  padding: 0.75rem 0.375rem;
  border-radius: 20px;
  background-color: #ffffff;
}
.btn-white:hover {
  background-color: hsl(0, 0%, 105%);
}

.btn-outlined-white {
  text-decoration: none;
  cursor: pointer;
  display: inline-block;
  border: 0;
  padding: 0.75rem 0.375rem;
  border-radius: 20px;
  background-color: #fff;
  border: 1px solid #ffffff;
}
.btn-outlined-white:hover {
  background-color: #ffffff;
}

.btn-complement-white {
  text-decoration: none;
  cursor: pointer;
  display: inline-block;
  border: 0;
  padding: 0.75rem 0.375rem;
  border-radius: 20px;
  background-color: #ffffff;
  color: light-comp(#ffffff);
}
.btn-complement-white:hover {
  color: #ffffff;
  background-color: light-comp(#ffffff);
}

/* Importar al principio */
.card {
  display: block;
  padding: 0.75rem;
  border: 1px solid #ddd;
  box-shadow: 1px 3px 5px rgba(0, 0, 0, 0.1);
  border-radius: 5px;
}
.card .card-title {
  font-size: 1rem;
  padding-bottom: 0.75rem;
  font-weight: bold;
}
.card .card-body {
  font-size: 1rem;
}
.card .card-body a {
  text-decoration: underline;
}

/**crear una estructura reutilizable de diseño de una barra de navegación (navbar),
 vamos a usar placeholder selector (%flex-layout), mapas de variables (como $colors), y funciones como @extend*/
/*En elplaceholder definimos un layout flexible donde se  centra los elementos verticalmente (align-items: center)
 y los distribuye horizontalmente con espacio entre ellos (justify-content: space-between).
 El uso del placeholder nos va a permitir reutilizar este bloque de estilos mediante @extend sin generar CSS innecesario.*/
.navbar .container, .navbar-white .container, .navbar-black .container, .navbar-red .container, .navbar-blue .container, .navbar-info .container, .navbar-error .container, .navbar-secondary .container, .navbar-primary .container, .navbar, .navbar-white, .navbar-black, .navbar-red, .navbar-blue, .navbar-info, .navbar-error, .navbar-secondary, .navbar-primary {
  width: 100%;
  display: flex;
  align-items: center;
  justify-content: space-between;
  box-sizing: border-box;
}

/*La clase .navbar: Va a herdar las propiedades del placeholder %flex-layout con @extend.
Agrega propiedades adicionales como padding y box-shadow provenientes de las variables v.$base-padding y 
v.$base-box-shadow.
//La clase hija .site-title define el tamaño de fuente con v.$font-size-lg, mientras que .container reutiliza el
mismo layout flexible.*/
.navbar, .navbar-white, .navbar-black, .navbar-red, .navbar-blue, .navbar-info, .navbar-error, .navbar-secondary, .navbar-primary {
  padding: 0.75rem 1.5rem;
  box-shadow: 1px 3px 5px rgba(0, 0, 0, 0.1);
}
.navbar .site-title, .navbar-white .site-title, .navbar-black .site-title, .navbar-red .site-title, .navbar-blue .site-title, .navbar-info .site-title, .navbar-error .site-title, .navbar-secondary .site-title, .navbar-primary .site-title {
  font-size: 1.5rem;
}
/*Recorre el mapa de colores (v.$colors), donde:
$key es el nombre del color (ejemplo: primary, secondary).
$val es el valor del color (ejemplo: #3498db, #2ecc71).
Por cada par clave-valor, se genera una clase .navbar-<key> que:
Extiende los estilos de .navbar.
Aplica un color de fondo único (background-color: $val).*/
.navbar-primary {
  background-color: #326dee;
}

.navbar-secondary {
  background-color: #1ac886;
}

.navbar-error {
  background-color: #d32752;
}

.navbar-info {
  background-color: #f6c31c;
}

.navbar-blue {
  background-color: #1919e6;
}

.navbar-red {
  background-color: #e61919;
}

.navbar-black {
  background-color: #000000;
}

.navbar-white {
  background-color: #ffffff;
}

/*Ventajas del Enfoque
Eficiencia: Uso de @extend reduce la repetición de código.
Escalabilidad: Fácil de agregar nuevos colores al mapa $colors para generar variantes adicionales.
Mantenibilidad: Centralización de estilos base y dinámicos mediante el archivo de variables.*/
/* crear un sistema de clases utilitarias reutilizables, y hace uso de varias características avanzadas de Sass, 
como maps, loops, y la extensión del uso de variables. */
/*El código define un mapa de utilidades ($utilities) que contiene una serie de configuraciones relacionadas con espaciado,
 márgenes, opacidad, bordes, tipografía y disposición. Cada propiedad de utilidad está organizada con un prefijo y un conjunto de valores.*/
/*Este patrón se repite para otras propiedades de utilidad, como márgenes, opacidad, bordes y tamaños de fuente. Es importante destacar que este
enfoque centraliza el diseño y permite crear clases reutilizables para espaciados y otros estilos a través de un sistema consistente.*/
/*crea dinámicamente las clases CSS utilizando las configuraciones definidas en el mapa de utilidades ($utilities).*/
/*Si el valor de la clave es default, la clase generada será simplemente .prefix (por ejemplo, .p para padding).

Si la clave es diferente a default, se añade un sufijo a la clase, como .p-1, .p-2, etc., generando clases como .p-1, .p-2, etc., que aplican diferentes niveles de padding.
Por ejemplo:

Para el caso de padding, si $values tiene una clave 1, se generará la clase .p-1 con el valor de padding correspondiente.*/
.p-0 {
  padding: 0;
}

.p-1 {
  padding: 0.75rem;
}

.p-2 {
  padding: 1.5rem;
}

.p-3 {
  padding: 3rem;
}

.p-4 {
  padding: 4.5rem;
}

.p-5 {
  padding: 6rem;
}

/*Si el valor de la clave es default, la clase generada será simplemente .prefix (por ejemplo, .p para padding).

Si la clave es diferente a default, se añade un sufijo a la clase, como .p-1, .p-2, etc., generando clases como .p-1, .p-2, etc., que aplican diferentes niveles de padding.
Por ejemplo:

Para el caso de padding, si $values tiene una clave 1, se generará la clase .p-1 con el valor de padding correspondiente.*/
.pl-0 {
  padding-left: 0;
}

.pl-1 {
  padding-left: 0.75rem;
}

.pl-2 {
  padding-left: 1.5rem;
}

.pl-3 {
  padding-left: 3rem;
}

.pl-4 {
  padding-left: 4.5rem;
}

.pl-5 {
  padding-left: 6rem;
}

/*Si el valor de la clave es default, la clase generada será simplemente .prefix (por ejemplo, .p para padding).

Si la clave es diferente a default, se añade un sufijo a la clase, como .p-1, .p-2, etc., generando clases como .p-1, .p-2, etc., que aplican diferentes niveles de padding.
Por ejemplo:

Para el caso de padding, si $values tiene una clave 1, se generará la clase .p-1 con el valor de padding correspondiente.*/
.pr-0 {
  padding-right: 0;
}

.pr-1 {
  padding-right: 0.75rem;
}

.pr-2 {
  padding-right: 1.5rem;
}

.pr-3 {
  padding-right: 3rem;
}

.pr-4 {
  padding-right: 4.5rem;
}

.pr-5 {
  padding-right: 6rem;
}

/*Si el valor de la clave es default, la clase generada será simplemente .prefix (por ejemplo, .p para padding).

Si la clave es diferente a default, se añade un sufijo a la clase, como .p-1, .p-2, etc., generando clases como .p-1, .p-2, etc., que aplican diferentes niveles de padding.
Por ejemplo:

Para el caso de padding, si $values tiene una clave 1, se generará la clase .p-1 con el valor de padding correspondiente.*/
.pt-0 {
  padding-top: 0;
}

.pt-1 {
  padding-top: 0.75rem;
}

.pt-2 {
  padding-top: 1.5rem;
}

.pt-3 {
  padding-top: 3rem;
}

.pt-4 {
  padding-top: 4.5rem;
}

.pt-5 {
  padding-top: 6rem;
}

/*Si el valor de la clave es default, la clase generada será simplemente .prefix (por ejemplo, .p para padding).

Si la clave es diferente a default, se añade un sufijo a la clase, como .p-1, .p-2, etc., generando clases como .p-1, .p-2, etc., que aplican diferentes niveles de padding.
Por ejemplo:

Para el caso de padding, si $values tiene una clave 1, se generará la clase .p-1 con el valor de padding correspondiente.*/
.pb-0 {
  padding-bottom: 0;
}

.pb-1 {
  padding-bottom: 0.75rem;
}

.pb-2 {
  padding-bottom: 1.5rem;
}

.pb-3 {
  padding-bottom: 3rem;
}

.pb-4 {
  padding-bottom: 4.5rem;
}

.pb-5 {
  padding-bottom: 6rem;
}

/*Si el valor de la clave es default, la clase generada será simplemente .prefix (por ejemplo, .p para padding).

Si la clave es diferente a default, se añade un sufijo a la clase, como .p-1, .p-2, etc., generando clases como .p-1, .p-2, etc., que aplican diferentes niveles de padding.
Por ejemplo:

Para el caso de padding, si $values tiene una clave 1, se generará la clase .p-1 con el valor de padding correspondiente.*/
.m-0 {
  margin: 0;
}

.m-1 {
  margin: 0.75rem;
}

.m-2 {
  margin: 1.5rem;
}

.m-3 {
  margin: 3rem;
}

.m-4 {
  margin: 4.5rem;
}

.m-5 {
  margin: 6rem;
}

/*Si el valor de la clave es default, la clase generada será simplemente .prefix (por ejemplo, .p para padding).

Si la clave es diferente a default, se añade un sufijo a la clase, como .p-1, .p-2, etc., generando clases como .p-1, .p-2, etc., que aplican diferentes niveles de padding.
Por ejemplo:

Para el caso de padding, si $values tiene una clave 1, se generará la clase .p-1 con el valor de padding correspondiente.*/
.ml-0 {
  margin-left: 0;
}

.ml-1 {
  margin-left: 0.75rem;
}

.ml-2 {
  margin-left: 1.5rem;
}

.ml-3 {
  margin-left: 3rem;
}

.ml-4 {
  margin-left: 4.5rem;
}

.ml-5 {
  margin-left: 6rem;
}

/*Si el valor de la clave es default, la clase generada será simplemente .prefix (por ejemplo, .p para padding).

Si la clave es diferente a default, se añade un sufijo a la clase, como .p-1, .p-2, etc., generando clases como .p-1, .p-2, etc., que aplican diferentes niveles de padding.
Por ejemplo:

Para el caso de padding, si $values tiene una clave 1, se generará la clase .p-1 con el valor de padding correspondiente.*/
.mr-0 {
  margin-right: 0;
}

.mr-1 {
  margin-right: 0.75rem;
}

.mr-2 {
  margin-right: 1.5rem;
}

.mr-3 {
  margin-right: 3rem;
}

.mr-4 {
  margin-right: 4.5rem;
}

.mr-5 {
  margin-right: 6rem;
}

/*Si el valor de la clave es default, la clase generada será simplemente .prefix (por ejemplo, .p para padding).

Si la clave es diferente a default, se añade un sufijo a la clase, como .p-1, .p-2, etc., generando clases como .p-1, .p-2, etc., que aplican diferentes niveles de padding.
Por ejemplo:

Para el caso de padding, si $values tiene una clave 1, se generará la clase .p-1 con el valor de padding correspondiente.*/
.mt-0 {
  margin-top: 0;
}

.mt-1 {
  margin-top: 0.75rem;
}

.mt-2 {
  margin-top: 1.5rem;
}

.mt-3 {
  margin-top: 3rem;
}

.mt-4 {
  margin-top: 4.5rem;
}

.mt-5 {
  margin-top: 6rem;
}

/*Si el valor de la clave es default, la clase generada será simplemente .prefix (por ejemplo, .p para padding).

Si la clave es diferente a default, se añade un sufijo a la clase, como .p-1, .p-2, etc., generando clases como .p-1, .p-2, etc., que aplican diferentes niveles de padding.
Por ejemplo:

Para el caso de padding, si $values tiene una clave 1, se generará la clase .p-1 con el valor de padding correspondiente.*/
.mb-0 {
  margin-bottom: 0;
}

.mb-1 {
  margin-bottom: 0.75rem;
}

.mb-2 {
  margin-bottom: 1.5rem;
}

.mb-3 {
  margin-bottom: 3rem;
}

.mb-4 {
  margin-bottom: 4.5rem;
}

.mb-5 {
  margin-bottom: 6rem;
}

/*Si el valor de la clave es default, la clase generada será simplemente .prefix (por ejemplo, .p para padding).

Si la clave es diferente a default, se añade un sufijo a la clase, como .p-1, .p-2, etc., generando clases como .p-1, .p-2, etc., que aplican diferentes niveles de padding.
Por ejemplo:

Para el caso de padding, si $values tiene una clave 1, se generará la clase .p-1 con el valor de padding correspondiente.*/
.o-10 {
  opacity: 0.1;
}

.o-20 {
  opacity: 0.2;
}

.o-30 {
  opacity: 0.3;
}

.o-40 {
  opacity: 0.4;
}

.o-50 {
  opacity: 0.5;
}

.o-60 {
  opacity: 0.6;
}

.o-70 {
  opacity: 0.7;
}

.o-80 {
  opacity: 0.8;
}

.o-90 {
  opacity: 0.9;
}

.o-100 {
  opacity: 1;
}

/*Si el valor de la clave es default, la clase generada será simplemente .prefix (por ejemplo, .p para padding).

Si la clave es diferente a default, se añade un sufijo a la clase, como .p-1, .p-2, etc., generando clases como .p-1, .p-2, etc., que aplican diferentes niveles de padding.
Por ejemplo:

Para el caso de padding, si $values tiene una clave 1, se generará la clase .p-1 con el valor de padding correspondiente.*/
.br {
  border-radius: 20px;
}

.br-none {
  border-radius: 0;
}

.br-xs {
  border-radius: 5px;
}

.br-sm {
  border-radius: 10px;
}

.br-lg {
  border-radius: 40px;
}

.br-full {
  border-radius: 50%;
}

/*Si el valor de la clave es default, la clase generada será simplemente .prefix (por ejemplo, .p para padding).

Si la clave es diferente a default, se añade un sufijo a la clase, como .p-1, .p-2, etc., generando clases como .p-1, .p-2, etc., que aplican diferentes niveles de padding.
Por ejemplo:

Para el caso de padding, si $values tiene una clave 1, se generará la clase .p-1 con el valor de padding correspondiente.*/
.display-n {
  display: none;
}

.display-b {
  display: block;
}

.display-f {
  display: flex;
}

.display-i {
  display: inline;
}

.display-i-b {
  display: inline-block;
}

/*Si el valor de la clave es default, la clase generada será simplemente .prefix (por ejemplo, .p para padding).

Si la clave es diferente a default, se añade un sufijo a la clase, como .p-1, .p-2, etc., generando clases como .p-1, .p-2, etc., que aplican diferentes niveles de padding.
Por ejemplo:

Para el caso de padding, si $values tiene una clave 1, se generará la clase .p-1 con el valor de padding correspondiente.*/
.font-sm {
  font-size: 0.75rem;
}

.font-md {
  font-size: 1rem;
}

.font-lg {
  font-size: 1.5rem;
}

.font-xl {
  font-size: 2rem;
}

.font-xxl {
  font-size: 3rem;
}

/*El resultado final de este código es la creación de clases utilitarias dinámicas y reutilizables que pueden ser utilizadas directamente en el HTML 
para aplicar estilos, sin tener que escribir CSS adicional. Por ejemplo, para el padding, las clases generadas serían:
Este enfoque modular y dinámico en Sass proporciona una manera muy flexible y escalable de crear un sistema de utilidades para tus estilos. Al definir todo en un solo archivo, 
las clases CSS se generan de manera automática y reutilizable, facilitando la gestión de los estilos y promoviendo la consistencia en el diseño del proyecto.*/

/*# sourceMappingURL=index.css.map */
